buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "foundation.icon:gradle-javaee-plugin:0.8.1"
    }
}

def scoreIntegrationTest = new HashMap<String, String>()

task buildContracts(type: Exec) {
    workingDir "$projectDir/"
    commandLine './gradlew', 'optimizedJar'
}

//apply plugin: 'deploy-contracts'
//deployCPSContracts {
//    envs {
//        local {
//            env = "local"
//        }
//        berlin {
//            env = "berlin"
//            configFile = "contracts-sample.json"
//            keystore = rootProject.findProperty('keystoreName') ?: ''
//            password = rootProject.findProperty('keystorePass') ?: ''
//        }
//        sejong {
//            env = "sejong"
//            configFile = "contracts-sample.json"
//            keystore = rootProject.findProperty('keystoreName') ?: ''
//            password = rootProject.findProperty('keystorePass') ?: ''
//        }
//    }
//}


//executeBalancedActions {
//    contractAddressFile = "sample.json"
//    propertiesFile = "sample.properties"
//    actionsFile = "actions-sample.json"
//    keystore = rootProject.findProperty('keystoreName') ?: ''
//    password = rootProject.findProperty('keystorePass') ?: ''
//}


subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'foundation.icon.javaee'

    sourceSets {
        intTest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            java {
            }
        }
    }

    configurations {
        intTestImplementation.extendsFrom testImplementation
        intTestAnnotationProcessor.extendsFrom testAnnotationProcessor
        intTestRuntimeOnly.extendsFrom testRuntimeOnly
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    // need to add this option to retrieve formal parameter names
    compileJava {
        options.compilerArgs += ['-parameters']
    }

    tasks.named('test') {
        // Use JUnit Platform for unit tests.
        useJUnitPlatform()
    }

    scoreIntegrationTest.put('env.props', new File(project(':test-lib').projectDir, 'conf/env.props'))

    afterEvaluate { project ->
        scoreIntegrationTest.put(project.name, project.getTasks().getByName("optimizedJar").outputJarName)
    }

    tasks.named("assemble") {
        if (project.tasks.findByName("compileIntTestJava")) {
            finalizedBy(project.tasks.getByName("compileIntTestJava"))
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        taskGraph.getAllTasks().eachWithIndex { task, n ->
            if (task.name == 'integrationTest') {
                scoreIntegrationTest.each { key, val -> task.systemProperty key, val }
            }
        }
    }
}
